package research;

import java.io.File;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.Reporter;
import org.testng.annotations.Test;
import pageLibrary.Library;
import pageLibrary.LoginPage;
import testBase.TestBase;
import utills.ExcelUtils;
import utills.Research_Constants;
import java.io.FileInputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;

public class Export_Protocol_In_Doc_Format_Action extends TestBase {
	
	@Test
	public void exportProtocolInDocFormat() throws Exception {
		
		//GENERATE UNIQUE NUMBER
		Library TodayDate = new Library();
		String uniqueNumber = TodayDate.Date();
		
		//RESEARCH FUNCTIONS OBJECT INITIALIZATION
		ResearchRegularFunctions ResearchFunc = new ResearchRegularFunctions();
		Library lib = new Library();
		LoginPage login = new LoginPage();
		
		//LOGIN TEST DATA
		ExcelUtils.setExcelFile(Research_Constants.Path_TestData+ Research_Constants.File_TestData, "Research_Logins");
		String labOwnerUserID = ExcelUtils.getCellData(1, 4);
		String labOwnerPwd = ExcelUtils.getCellData(1, 5);
		
		ExcelUtils.setExcelFile(Research_Constants.Path_TestData+ Research_Constants.File_TestData, "Protocol_Creation");
		String protocolName = "OrgProtocol"+uniqueNumber;
		String protocolDescription = ExcelUtils.getCellData(1, 1)+uniqueNumber;
		String visibility = ExcelUtils.getCellData(1, 2);
		
		ExcelUtils.setExcelFile(Research_Constants.Path_TestData+ Research_Constants.File_TestData, "Edit_Protocol");
		String addStepName = ExcelUtils.getCellData(1, 2)+uniqueNumber;
		String addStepDescription = ExcelUtils.getCellData(1, 3)+uniqueNumber;
		String addProtocolNote = ExcelUtils.getCellData(1, 4)+uniqueNumber;
		String addProtocolNoteDesc = ExcelUtils.getCellData(1, 5)+uniqueNumber;
		
		Reporter.log("Get download path of the system");
        final String homedirectory = System.getProperty("user.home");
        final String downloadPath = homedirectory+"\\Downloads";
        
        Reporter.log("Login to application");
		init();
		lib.loginToApplication(labOwnerUserID, labOwnerPwd);
		
		Reporter.log("Navigate to protocol template list");
		ResearchFunc.navigateToProtocolTemplateList();
		
		Reporter.log("Create new protocol template with scope Public");
		ResearchFunc.createProtocolTemplate(protocolName, protocolDescription, visibility);
		
		Reporter.log("Navigate to protocol detail page");
		ResearchFunc.navigateToProtocolTemplateDetailPage(protocolName);
		
		Reporter.log("Adding steps to the protocol template");
		ResearchFunc.addProtocolSteps(protocolName, addStepName, addStepDescription);
		
		Reporter.log("Verify added steps title and description in protocol template");
		ResearchFunc.verifyProtocolStep(addStepName, addStepDescription);
		
		Reporter.log("Add notes to protocol template with title and description");
		ResearchFunc.addProtocolNotes(addProtocolNote, addProtocolNoteDesc);
		
		Reporter.log("Verify added note title in protocol");
		ResearchFunc.verifyProtocolNotes(addProtocolNote, addProtocolNoteDesc);
		
		Reporter.log("Download Protocol Template in word format");
		getWebElement("DownloadProtocolTemplate").click();
		getWebElement("ExportAsWordLink").click();
		Thread.sleep(3000);
		
		Reporter.log("Verify protocol template downloaded in doc format or not");
		File downloadFile = new File(downloadPath+"\\"+protocolName+".docx");
		boolean bTemplateDownloaded = false;
		for (int count=1;count<=100;count++) {
			if(downloadFile.exists()) {
			   bTemplateDownloaded = true;
	           break;
	        }
			else {
				bTemplateDownloaded = false;
			}
		}
		Assert.assertEquals(bTemplateDownloaded,true,"Protocol template download as word failed!");

		Reporter.log("Read the protocol template word document");
		FileInputStream inputStream = new FileInputStream(downloadFile);
		XWPFDocument docx = new XWPFDocument(inputStream);
		XWPFWordExtractor wordDocument = new XWPFWordExtractor(docx);
		String wordDocumentContent = wordDocument.getText();
	    wordDocument.close();
	    
	    Reporter.log("Verify document generation date in exported protocol template word document");
		Date date = new Date( );
		SimpleDateFormat dateFormat = new SimpleDateFormat ("dd MMM yyyy");
	    String currentDate = dateFormat.format(date).toString();
	    
	    String getdata1 = wordDocumentContent.split("List of Steps")[0];
	    String getdata2 = getdata1.split("Generated By: ")[1];
	    String getdata3 = getdata1.split("Generated By: ")[0];

	    boolean bVerifyDocumentGenDate = getdata2.toLowerCase().contains(currentDate.toLowerCase());
	    Assert.assertEquals(bVerifyDocumentGenDate,true,"Document generation date mismatching in exported doc");
	    
	    Reporter.log("Verify document generated user in exported protocol template word document");
	    getWebElement("UserProfileIcon").click();
	    Thread.sleep(2000);
	    String getLoggedOnUserName = getWebElement("UserProfileName").getText();
	    getWebElement("UserProfileIcon").click();
	    boolean bVerifyDocumentGenUser = getdata2.contains(getLoggedOnUserName);
	    Assert.assertEquals(bVerifyDocumentGenUser,true,"Document generated user mismatching in exportted doc");
	    
	    Reporter.log("Verify protocol title and description in exported protocol template word document");
	    boolean bVerifyProtocolName = getdata3.contains(protocolName);
	    Assert.assertEquals(bVerifyProtocolName,true,"Protocol template title mismatching in exported doc");
	    boolean bVerifyProtocolDescription = getdata1.contains(protocolDescription);
	    Assert.assertEquals(bVerifyProtocolDescription,true,"Protocol template description mismatching in exported doc");
	    
	    Reporter.log("Verify protocol steps and step description in exported protocol template word document");
	    boolean bVerifySteps = wordDocumentContent.contains(addStepName);
	    boolean bVerifyStepDesc = wordDocumentContent.contains(addStepDescription);
	    Assert.assertEquals(bVerifySteps,true,"Protocol template steps title mismatching in exported doc");
	    Assert.assertEquals(bVerifyStepDesc,true,"Protocol template steps description mismatching in exported doc");
	    
	    Reporter.log("Verify protocol notes and notes description in exported protocol template word document");
	    boolean bVerifyNotes = wordDocumentContent.contains(addProtocolNote);
	    boolean bVerifyNoteDesc = wordDocumentContent.contains(addProtocolNoteDesc);
	    Assert.assertEquals(bVerifyNotes,true,"Protocol template notes title mismatching in exported doc");
	    Assert.assertEquals(bVerifyNoteDesc,true,"Protocol template notes description mismatching in exported doc");
	    
	    Reporter.log("Click on User Settings and logout");
		Thread.sleep(1000);
		login.Logout();
	}
}